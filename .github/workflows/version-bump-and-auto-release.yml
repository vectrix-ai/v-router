name: Version Bump and Auto Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  bump-version:
    runs-on: ubuntu-latest
    # Only run when PR is merged (not when closed without merging)
    if: github.event.pull_request.merged == true
    permissions:
      contents: write  # Needed for pushing commits
      pull-requests: write  # If you want to create PRs

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0   # Fetch all history for all branches and tags
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Install bump2version
        run: pip install bump2version

      - name: Determine version bump type
        id: bump-type
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          if echo "$PR_TITLE $PR_BODY" | grep -q "#major"; then
            echo "bump=major" >> $GITHUB_OUTPUT
          elif echo "$PR_TITLE $PR_BODY" | grep -q "#minor"; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
          fi

      - name: Bump version and push
        id: version-bump
        run: |
          # Get current version before bump
          CURRENT_VERSION=$(grep "current_version =" .bumpversion.cfg | sed 's/current_version = //')
          
          # Perform the bump
          bump2version ${{ steps.bump-type.outputs.bump }}
          
          # Get new version after bump
          NEW_VERSION=$(grep "current_version =" .bumpversion.cfg | sed 's/current_version = //')
          
          # Set output for use in later steps
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "previous_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Explicitly push commit and tags to main
          git push origin main
          git push origin --tags

      - name: Generate Release Notes
        id: release-notes
        run: |
          # Get all commits between the last two tags
          COMMITS=$(git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"- %s")
          echo "COMMITS<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version-bump.outputs.new_version }}
          name: Release v${{ steps.version-bump.outputs.new_version }}
          body: |
            ## What's Changed
            ${{ steps.release-notes.outputs.COMMITS }}
            
            For full changes, see the [comparison between v${{ steps.version-bump.outputs.previous_version }} and v${{ steps.version-bump.outputs.new_version }}](../../compare/v${{ steps.version-bump.outputs.previous_version }}...v${{ steps.version-bump.outputs.new_version }})
          draft: false
          prerelease: false